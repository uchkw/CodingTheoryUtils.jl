var documenterSearchIndex = {"docs":
[{"location":"#CodingTheoryUtils.jl","page":"Home","title":"CodingTheoryUtils.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Base.:*-Tuple{Vector{ùîΩ‚ÇÇ}, Vector{ùîΩ‚ÇÇ}}","page":"Home","title":"Base.:*","text":"Base.:*(a::Vector{F2}, b::Vector{F2})::F2\n\nCompute the dot product of two binary vectors.\n\nArguments\n\na::Vector{F2}: First binary vector\nb::Vector{F2}: Second binary vector\n\nReturns\n\nF2: The dot product result in F2\n\nExamples\n\nv1 = [F2(1), F2(0), F2(1)]\nv2 = [F2(1), F2(1), F2(0)]\nresult = v1 * v2  # Returns F2(1)\n\nThrows\n\nAssertionError: If the vectors have different lengths\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Union{Tuple{F}, Tuple{Vector{F}, Vector{ùîΩ‚ÇÇ}}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"Base.:*","text":"Base.:*(a::Vector{F}, b::Vector{F2})::F where F <: GaloisFields.AbstractGaloisField\n\nCompute the dot product of two vectors over Galois fields.\n\nArguments\n\na::Vector{F}: First vector with elements in a Galois field F\nb::Vector{F2}: Second vector with elements in F2 (binary field)\n\nReturns\n\nF: The dot product result in the same field as the first vector\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nv1 = [F4(1), F4(0), F4(1)]\nv2 = [F2(1), F2(1), F2(0)]\nresult = v1 * v2  # Returns F4(1)\n\nThrows\n\nAssertionError: If the vectors have different lengths\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Union{Tuple{F}, Tuple{Vector{ùîΩ‚ÇÇ}, Vector{F}}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"Base.:*","text":"Base.:*(a::Vector{F2}, b::Vector{F})::F where F <: GaloisFields.AbstractGaloisField\n\nCompute the dot product of two vectors over Galois fields, with the first vector in F2.\n\nThis is a commutative operation that calls the main dot product implementation.\n\nArguments\n\na::Vector{F2}: First vector with elements in F2 (binary field)\nb::Vector{F}: Second vector with elements in a Galois field F\n\nReturns\n\nF: The dot product result in the same field as the second vector\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nv1 = [F2(1), F2(1), F2(0)]\nv2 = [F4(1), F4(0), F4(1)]\nresult = v1 * v2  # Returns F4(1)\n\nThrows\n\nAssertionError: If the vectors have different lengths\n\n\n\n\n\n","category":"method"},{"location":"#Base.inv-Union{Tuple{Matrix{F}}, Tuple{F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"Base.inv","text":"inv(M::Array{F, 2}) where F <: GaloisFields.AbstractGaloisField\n\nCompute the inverse of a square matrix over a Galois field using Gaussian elimination.\n\nArguments\n\nM: A square matrix over a Galois field\n\nReturns\n\nThe inverse matrix if it exists\nnothing if the matrix is singular\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nM = [Œ± 1; 1 Œ±]\nM_inv = inv(M)\n\n\n\n\n\n","category":"method"},{"location":"#Base.log-Union{Tuple{F}, Tuple{F, F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"Base.log","text":"log(Œ±::F, a::F) where F <: AbstractGaloisField\n\nCompute the logarithm of a in base Œ± in the Galois field F.\n\nArguments\n\nŒ±::F: The base of the logarithm.\na::F: The value to compute the logarithm of.\n\nReturns\n\nInt: The discrete logarithm of a base Œ± if it exists.\nInf: If a is zero.\nnothing: If a is not a power of Œ±.\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.F2p-Union{Tuple{Fb}, Tuple{Fe}, Tuple{Vector{Fb}, Fe}} where {Fe<:GaloisFields.AbstractExtensionField, Fb<:GaloisFields.AbstractGaloisField}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.F2p","text":"F2p(b::Vector{Fb}, Œ±::Fe)::Fe\n\nConvert a vector of F2 elements to a field element using the given basis element.\n\nArguments\n\nb::Vector{Fb}: A vector of F2 elements\nŒ±::Fe: A basis element of the target field\n\nReturns\n\nFe: The field element represented by the vector\n\nThrows\n\nAssertionError: If the length of the input vector does not match the extension degree of the field\n\nExamples\n\njulia> F4, Œ± = GaloisField(2, 2, :Œ±)\njulia> F2p([F2(1), F2(0)], Œ±)\n1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.F2p-Union{Tuple{Fb}, Tuple{Type{<:GaloisFields.AbstractExtensionField}, Vector{Fb}}} where Fb<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.F2p","text":"F2p(Fe::Type{<:GaloisFields.AbstractExtensionField}, b::Vector{Fb})::Fe\n\nConvert a vector of F2 elements to a field element using the primitive element of the field.\n\nArguments\n\nFe::Type{<:GaloisFields.AbstractExtensionField}: The target field type\nb::Vector{Fb}: A vector of F2 elements\n\nReturns\n\nFe: The field element represented by the vector\n\nThrows\n\nAssertionError: If the length of the input vector does not match the extension degree of the field\n\nExamples\n\njulia> F4, Œ± = GaloisField(2, 2, :Œ±)\njulia> F2p(F4, [F2(1), F2(0)])\n1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.bi2de-Tuple{Vector{<:Integer}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.bi2de","text":"bi2de(b::Vector{<:Integer})::Int\n\nConvert a binary vector to a decimal number.\n\nArguments\n\nb::Vector{<:Integer}: A vector of 0s and 1s representing a binary number\n\nReturns\n\nInt: The decimal representation of the input binary vector\n\nExamples\n\njulia> bi2de([1, 0, 1])\n5\n\njulia> bi2de([0, 1, 0, 1])\n10\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.bvec","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.bvec","text":"bvec(p::Polynomial{F2,:x}, bw::Int=0)::Vector{F2}\n\nConvert a polynomial over F2 to its binary vector representation.\n\nArguments\n\np::Polynomial{F2,:x}: A polynomial over F2\nbw::Int: Optional bit width (default: 0, meaning use polynomial degree)\n\nReturns\n\nVector{F2}: Binary vector representation of the polynomial\n\n\n\n\n\n","category":"function"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.bvec-Tuple{Fe} where Fe<:GaloisFields.AbstractExtensionField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.bvec","text":"bvec(Œ±::Fe)::Vector{F2}\n\nConvert a Galois field element to its binary vector representation. The length of the output vector is equal to the extension degree of the field.\n\nArguments\n\nŒ±::Fe: A Galois field element\n\nReturns\n\nVector{F2}: Binary vector representation of the element\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.bvec-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.bvec","text":"bvec(x::T, bw::Int=0)::Vector{F2}\n\nConvert an integer to its binary vector representation.\n\nArguments\n\nx::T: An integer value\nbw::Int: Optional bit width (default: 0, meaning automatic calculation)\n\nReturns\n\nVector{F2}: Binary vector representation of the integer\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.de2bi-Tuple{Integer}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.de2bi","text":"de2bi(d::Integer; width::Int = 0)::Vector{Int}\n\nConvert a decimal number to a binary vector.\n\nArguments\n\nd::Integer: The decimal number to convert\nwidth::Int = 0: The desired width of the output vector. If 0, the minimum required width is used.\n\nReturns\n\nVector{Int}: A vector of 0s and 1s representing the binary form of the input number\n\nExamples\n\njulia> de2bi(5)\n3-element Vector{Int64}:\n 1\n 0\n 1\n\njulia> de2bi(5, width=4)\n4-element Vector{Int64}:\n 1\n 0\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.de2f2-Tuple{Integer}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.de2f2","text":"de2f2(d::Integer; width::Int = 0)::Vector{F2}\n\nConvert a decimal number to a vector of F2 elements.\n\nArguments\n\nd::Integer: The decimal number to convert\nwidth::Int = 0: The desired width of the output vector. If 0, the minimum required width is used.\n\nReturns\n\nVector{F2}: A vector of F2 elements representing the binary form of the input number\n\nExamples\n\njulia> de2f2(5)\n3-element Vector{F2}:\n 1\n 0\n 1\n\njulia> de2f2(5, width=4)\n4-element Vector{F2}:\n 1\n 0\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.de2f2poly-Tuple{Integer}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.de2f2poly","text":"de2f2poly(d::Integer; width::Int = 0)::Polynomial{F2,:x}\n\nConvert a decimal number to a polynomial over F2.\n\nArguments\n\nd::Integer: The decimal number to convert\nwidth::Int = 0: The desired width of the polynomial coefficients. If 0, the minimum required width is used.\n\nReturns\n\nPolynomial{F2,:x}: A polynomial over F2 representing the binary form of the input number\n\nExamples\n\njulia> de2f2poly(5)\nPolynomial(1 + x^2)\n\njulia> de2f2poly(5, width=4)\nPolynomial(1 + x^2)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.extension_degree-Tuple{GaloisFields.AbstractGaloisField}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.extension_degree","text":"extension_degree(a::GaloisFields.AbstractGaloisField)::Int\n\nCalculate the extension degree of the finite field.\n\nArguments\n\na::GaloisFields.AbstractGaloisField: A finite field element\n\nReturns\n\nThe extension degree of the finite field\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nextension_degree(Œ±) == 2\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.extension_degree-Tuple{Type{<:GaloisFields.AbstractGaloisField}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.extension_degree","text":"extension_degree(ff::Type{<:GaloisFields.AbstractGaloisField})::Int\n\nCalculate the extension degree of the finite field.\n\nArguments\n\nff::Type{<:GaloisFields.AbstractGaloisField}: A finite field type\n\nReturns\n\nThe extension degree of the finite field\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nextension_degree(F4) == 2\n\nGF2 = GaloisField(2)\nextension_degree(GF2) == 1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.extract_degrees-Tuple{AbstractString}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.extract_degrees","text":"extract_degrees(polynomial::AbstractString) -> Vector{Int}\n\nExtract the degrees of the terms in a polynomial string representation.\n\nThe polynomial string should be in the format \"x^a + x^b + ... + 1\". Terms should be separated by \" + \".\n\nExamples\n\njulia> extract_degrees(\"x^3 + x + 1\") 3-element Vector{Int64}:  3  1  0\n\njulia> extract_degrees(\"x^5\") 1-element Vector{Int64}:  5\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.field_size-Tuple{GaloisFields.AbstractGaloisField}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.field_size","text":"field_size(a::GaloisFields.AbstractGaloisField)::Int\n\nCalculate the size of the finite field.\n\nArguments\n\na::GaloisFields.AbstractGaloisField: A finite field element\n\nReturns\n\nThe size of the finite field\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nfield_size(Œ±) == 4\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.field_size-Tuple{Type{<:GaloisFields.AbstractGaloisField}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.field_size","text":"field_size(FF::Type{<:GaloisFields.AbstractGaloisField})::Int\n\nCalculate the size of the finite field.\n\nArguments\n\nFF::Type{<:GaloisFields.AbstractGaloisField}: A finite field type\n\nReturns\n\nThe size of the finite field\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nfield_size(F4) == 4\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.from_f2mat_to_intmat-Tuple{Matrix{<:GaloisFields.AbstractGaloisField}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.from_f2mat_to_intmat","text":"from_f2mat_to_intmat(M::Matrix{<:GaloisFields.AbstractGaloisField})::Matrix{Int}\n\nConvert a matrix over a Galois field to an integer matrix where 1 is mapped to 1 and 0 is mapped to 0.\n\nArguments\n\nM::Matrix{<:GaloisFields.AbstractGaloisField}: Input matrix over a Galois field\n\nReturns\n\nMatrix{Int}: Integer matrix with the same dimensions as the input matrix\n\nExamples\n\njulia> F4, Œ± = GaloisField(2, 2, :Œ±)\njulia> M = [F4(1) F4(0); F4(0) F4(1)]\njulia> from_f2mat_to_intmat(M)\n2√ó2 Matrix{Int64}:\n 1  0\n 0  1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_conjugates-Tuple{F} where F<:GaloisFields.AbstractExtensionField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_conjugates","text":"get_conjugates(Œ≤::F)::Array{F,1} where F <: GaloisFields.AbstractExtensionField\n\nCalculate the conjugates of a finite field element.\n\nArguments\n\nŒ≤: A finite field element\n\nReturns\n\nArray{F,1}: An array of the element's conjugates\n\nExamples\n\njulia> F4 = @GaloisField 2^2\njulia> Œ± = primitiveroot(F4)\njulia> get_conjugates(Œ±)\n2-element Array{GaloisField{2,2},1}:\n Œ±\n Œ±^2\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_minimum_polynomial-Tuple{F} where F<:GaloisFields.AbstractExtensionField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_minimum_polynomial","text":"get_minimum_polynomial(Œ≤::F)::Polynomial{F} where F <: GaloisFields.AbstractExtensionField\n\nCalculate the minimal polynomial of a finite field element.\n\nArguments\n\nŒ≤: A finite field element\n\nReturns\n\nPolynomial{F}: The minimal polynomial of the element\n\nExamples\n\njulia> F4 = @GaloisField 2^2\njulia> Œ± = primitiveroot(F4)\njulia> get_minimum_polynomial(Œ±)\nPolynomial(1 + x + x^2)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_order-Tuple{F} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_order","text":"get_order(x::F) where F <: GaloisFields.AbstractGaloisField\n\nCalculate the order of a finite field element.\n\nArguments\n\nx::F: A finite field element\n\nReturns\n\nInt: The order of the element. If the element is zero, returns -1.\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nget_order(Œ±)  # 3\nget_order(F4(1))  # 1\nget_order(F4(0))  # -1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_order-Union{Tuple{Polynomials.Polynomial{F}}, Tuple{F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_order","text":"get_order(genpoly::Polynomial{F}) where F <: GaloisFields.AbstractGaloisField\n\nCalculate the order of a polynomial.\n\nArguments\n\ngenpoly::Polynomial{F}: A polynomial over a finite field\n\nReturns\n\nInt: The order of the polynomial\n\nExamples\n\nF2 = @GaloisField 2\np = Polynomial([F2(1), F2(1), F2(1)])  # x^2 + x + 1\nget_order(p)  # 3\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_roots-Union{Tuple{Polynomials.Polynomial{F}}, Tuple{F}} where F<:GaloisFields.AbstractExtensionField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_roots","text":"get_roots(px::Polynomial{F})::Array{F,1} where F <: GaloisFields.AbstractExtensionField\n\nCalculate the roots of a polynomial over a finite field.\n\nArguments\n\npx: A polynomial over a finite field\n\nReturns\n\nArray{F,1}: An array of the polynomial's roots\n\nExamples\n\njulia> F4, Œ± = GaloisField(2, 2, :Œ±)\njulia> p = Polynomial([F4(1), F4(1), F4(1)])  # x^2 + x + 1\njulia> get_roots(p)\n2-element Array{GaloisField{2,2},1}:\n Œ±\n Œ±^2\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.get_tr_one_elem-Tuple{F} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.get_tr_one_elem","text":"get_tr_one_elem(a::F)::F where F <: GaloisFields.AbstractGaloisField\n\nFind an element in the Galois field whose trace is 1.\n\nArguments\n\na::F: A non-zero Galois field element (assumed to be a primitive element)\n\nReturns\n\nF: An element whose trace is 1\n\nThrows\n\nAssertionError: If the input element is zero\n\nNotes\n\nThis function finds an element b such that trace(b) = 1\nSuch an element always exists in a finite field of characteristic 2\nThe returned element can be used as a basis element for the trace-dual basis\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.gf_pretty-Tuple{Vector{ùîΩ‚ÇÇ}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.gf_pretty","text":"gf_pretty(v::Vector{F2})::String\n\nPretty print a binary vector (F2) as a polynomial string (e.g., \"1 + x^2\"). Corresponds to the polynomial whose coefficients are the elements of v.\n\nArguments\n\nv::Vector{F2}: The binary vector.\n\nReturns\n\nString: The polynomial string representation, or \"0\" for zero/empty vector.\n\nExamples\n\ngf_pretty([F2(1), F2(0), F2(1)]) == \"1 + x^2\"\ngf_pretty([F2(0), F2(1)]) == \"x\"\ngf_pretty(F2[]) == \"0\"\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.gf_pretty-Union{Tuple{F}, Tuple{F, F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.gf_pretty","text":"gf_pretty(a::F, Œ±::F)::String where F <: GaloisFields.AbstractGaloisField\n\nPretty print a Galois field element in the form \"Œ±^p\".\n\nArguments\n\na::F: The Galois field element to print.\nŒ±::F: The primitive element of the field used as the base.\n\nReturns\n\nString: The string representation \"Œ±^p\" or \"0\" if the element is zero.\n\nExamples\n\nF4, Œ± = GaloisField(4, :Œ±)\ngf_pretty(Œ±, Œ±) == \"Œ±^1\"\ngf_pretty(F4(1), Œ±) == \"Œ±^0\"\ngf_pretty(F4(0), Œ±) == \"0\"\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.gf_pretty-Union{Tuple{F}, Tuple{Vector{F}, F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.gf_pretty","text":"gf_pretty(v::Vector{F}, Œ±::F)::Vector{String} where F <: GaloisFields.AbstractGaloisField\n\nPretty print a vector of Galois field elements using gf_pretty(a, Œ±) for each element.\n\nArguments\n\nv::Vector{F}: The vector of Galois field elements.\nŒ±::F: The primitive element of the field.\n\nReturns\n\nVector{String}: A vector of string representations.\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.hex-Tuple{Vector{ùîΩ‚ÇÇ}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.hex","text":"hex(v::Vector{F2})::String\n\nConvert a binary vector over F2 to a hexadecimal string representation.\n\nArguments\n\nv::Vector{F2}: A binary vector over F2\n\nReturns\n\nString: Hexadecimal string representation of the input vector\n\nExamples\n\njulia> v = [F2(1), F2(0), F2(1), F2(0)]\njulia> hex(v)\n\"a\"  # 1010 in hex\n\njulia> v = [F2(1), F2(1), F2(1), F2(1), F2(0), F2(0), F2(0), F2(0)]\njulia> hex(v)\n\"f0\"  # 11110000 in hex\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.is_primitive-Tuple{GaloisFields.AbstractGaloisField}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.is_primitive","text":"is_primitive(a::GaloisFields.AbstractGaloisField)::Bool\n\nCheck if an element is a primitive root of the finite field.\n\nArguments\n\na::GaloisFields.AbstractGaloisField: A finite field element\n\nReturns\n\ntrue if the element is a primitive root, false otherwise\n\nNotes\n\nA primitive root is an element that generates the multiplicative group of the field\nThe multiplicative group of a finite field is cyclic\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nis_primitive(Œ±) == true\nis_primitive(F4(1)) == false\n\nGF2 = GaloisField(2)\nis_primitive(GF2(1)) == true # Special case for GF(2)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix-Tuple{F} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix","text":"make_companion_matrix(a::F)::Matrix{F2} where F <: GaloisFields.AbstractGaloisField\n\nGenerate a companion matrix from a finite field element.\n\nArguments\n\na::F: A finite field element\n\nReturns\n\nMatrix{F2}: Companion matrix\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nA = make_companion_matrix(Œ±)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix-Union{Tuple{F}, Tuple{F, F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix","text":"make_companion_matrix(a::F, Œ±::F)::Matrix{F2} where F <: GaloisFields.AbstractGaloisField\n\nGenerate a companion matrix from a finite field element and its primitive root.\n\nArguments\n\na::F: A finite field element\nŒ±::F: The primitive root of the field\n\nReturns\n\nMatrix{F2}: Companion matrix\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nA = make_companion_matrix(Œ±, Œ±)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix-Union{Tuple{Vector{F}}, Tuple{F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.make_companion_matrix","text":"make_companion_matrix(g::Vector{F})::Matrix{F} where F <: GaloisFields.AbstractGaloisField\n\nGenerate a companion matrix from a polynomial's coefficient vector.\n\nArguments\n\ng::Vector{F}: Coefficient vector of the polynomial (excluding constant term)\n\nReturns\n\nMatrix{F}: Companion matrix\n\nExamples\n\nF2 = @GaloisField 2\ng = [F2(1), F2(1)]  # Coefficients of x^2 + x + 1\nA = make_companion_matrix(g)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.num_terms-Union{Tuple{Polynomials.Polynomial{F}}, Tuple{F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.num_terms","text":"num_terms(f::Polynomial{F}) where F <: AbstractGaloisField -> Int\n\nReturn the number of non-zero terms (coefficients) in the polynomial f.\n\nArguments\n\nf::Polynomial{F}: The input polynomial.\n\nReturns\n\nInt: The number of non-zero coefficients.\n\nExamples\n\njulia> p = Polynomial([F2(1), F2(1), F2(0), F2(1)]); # 1 + x + x^3\n\njulia> num_terms(p) 3\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.one_hot_vector-Union{Tuple{F}, Tuple{Int64, Int64, F}} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.one_hot_vector","text":"one_hot_vector(len::Int, pos::Int, v::F) where F <: AbstractGaloisField -> Vector{F}\n\nCreate a one-hot vector of length len with value v at position pos. All other elements will be zero in the field F.\n\nArguments\n\nlen::Int: The length of the resulting vector.\npos::Int: The 1-based index where the value v should be placed.\nv::F: The value to place at the specified position.\n\nReturns\n\nVector{F}: The resulting one-hot vector.\n\nExamples\n\njulia> onehotvector(5, 3, F2(1)) 5-element Vector{F2}:  0  0  1  0  0\n\njulia> GF8, Œ± = GaloisField(2, 3, :Œ±);\n\njulia> onehotvector(4, 2, Œ±^3) 4-element Vector{GF8}:  0  Œ±^3  0  0\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.polynomial_from_roots-Union{Tuple{AbstractVector{T}}, Tuple{T}, Tuple{AbstractVector{T}, Union{Char, AbstractString, Symbol, Polynomials.Var}}} where T","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.polynomial_from_roots","text":"polynomial_from_roots(r::AbstractVector{T}, var::Polynomials.SymbolLike=:x)::Polynomial{T} where {T}\n\nGenerate a polynomial from its roots.\n\nArguments\n\nr: An array of roots\nvar: The variable symbol for the polynomial (default: :x)\n\nReturns\n\nPolynomial{T}: The polynomial with the given roots\n\nExamples\n\njulia> F4, Œ± = GaloisField(2, 2, :Œ±)\njulia> roots = [Œ±, Œ±^2]\njulia> polynomial_from_roots(roots)\nPolynomial(1 + x + x^2)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.primitive_root-Tuple{Type{<:GaloisFields.AbstractGaloisField}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.primitive_root","text":"primitive_root(FF::Type{<:GaloisFields.AbstractGaloisField})::GaloisFields.AbstractGaloisField\n\nFind a primitive root of the finite field.\n\nArguments\n\nFF::Type{<:GaloisFields.AbstractGaloisField}: A finite field type\n\nReturns\n\nA primitive root of the finite field\n\nNotes\n\nA primitive root is an element that generates the multiplicative group of the field\nThe multiplicative group of a finite field is cyclic\n\nExamples\n\nF4, Œ± = GaloisField(2, 2, :Œ±)\nprimitive_root(F4) == Œ±\n\nGF2 = GaloisField(2)\nprimitive_root(GF2) == GF2(1)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.string2F2poly-Tuple{AbstractString}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.string2F2poly","text":"string2F2poly(polynomial::AbstractString) -> Polynomial{F2, :x}\n\nConvert a polynomial string representation into a Polynomial{F2, :x} object.\n\nExamples\n\njulia> string2F2poly(\"x^3 + x + 1\") Polynomial(1 + x + x^3)\n\njulia> string2F2poly(\"x^5\") Polynomial(x^5)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.string2coefvec-Tuple{AbstractString}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.string2coefvec","text":"string2coefvec(polynomial::AbstractString) -> Vector{Int}\n\nConvert a polynomial string representation into a coefficient vector (Int). Assumes the polynomial is over GF(2), so coefficients are 0 or 1. The vector index corresponds to the degree (index 1 is degree 0).\n\nExamples\n\njulia> string2coefvec(\"x^3 + x + 1\") 4-element Vector{Int64}:  1  1  0  1\n\njulia> string2coefvec(\"x^5\") 6-element Vector{Int64}:  0  0  0  0  0  1\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.trace-Tuple{F} where F<:GaloisFields.AbstractGaloisField","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.trace","text":"trace(a::F)::F2 where F <: GaloisFields.AbstractGaloisField\n\nCalculate the trace of a Galois field element.\n\nArguments\n\na::F: A Galois field element\n\nReturns\n\nF2: The trace of the element (0 or 1)\n\nNotes\n\nThe trace of an element a in GF(2^m) is defined as Tr(a) = a + a^2 + a^4 + ... + a^(2^(m-1))\nThe trace is always an element of the base field GF(2)\nThe trace is a linear function over GF(2)\nThe trace of zero is zero\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.write_bmat_file-Tuple{Matrix, String}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.write_bmat_file","text":"write_bmat_file(H::Matrix, filename::String)\n\nWrite a matrix to a file in bmat format.\n\nThe bmat format consists of:\n\nFirst line: number of rows and columns separated by a space\nFollowing lines: matrix elements separated by spaces\n\nArguments\n\nH::Matrix: The matrix to write (can be Int or F2 matrix)\nfilename::String: The output filename\n\nExamples\n\nH = [1 0 1; 0 1 1]\nwrite_bmat_file(H, \"matrix.bmat\")\n\n# F2 matrix example\nH_F2 = [F2(1) F2(0) F2(1); F2(0) F2(1) F2(1)]\nwrite_bmat_file(H_F2, \"matrix_f2.bmat\")\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.GaloisFieldUtils.wt-Tuple{Vector{ùîΩ‚ÇÇ}}","page":"Home","title":"CodingTheoryUtils.GaloisFieldUtils.wt","text":"wt(v::Vector{F2})::Int\n\nCalculate the Hamming weight (number of non-zero elements) of a binary vector.\n\nArguments\n\nv::Vector{F2}: A binary vector over F2\n\nReturns\n\nInt: The Hamming weight of the vector\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.BCH.build_bch_parity_matrix-NTuple{4, Int64}","page":"Home","title":"CodingTheoryUtils.BCH.build_bch_parity_matrix","text":"build_bch_parity_matrix(n::Int, k::Int, m::Int, t::Int)\n\nBuild the parity check matrix for a BCH code.\n\nArguments\n\nn::Int: Code length\nk::Int: Information bits  \nm::Int: Field extension degree\nt::Int: Error correction capability\n\nReturns\n\nMatrix{F2}: Parity check matrix of size (n-k) √ó n\n\nExamples\n\nH = build_bch_parity_matrix(15, 7, 4, 2)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.BCH.generate_bch_parity_check_matrix-Tuple{Int64, Int64}","page":"Home","title":"CodingTheoryUtils.BCH.generate_bch_parity_check_matrix","text":"generate_bch_parity_check_matrix(n::Int, k::Int)\n\nGenerate BCH parity check matrix and save to bmat file.\n\nArguments\n\nn::Int: Code length\nk::Int: Information bits\n\nReturns\n\nMatrix{Int}: Parity check matrix as integer matrix\n\nSide Effects\n\nCreates file \"BCHnk.bmat\" in current directory\nPrints matrix content to console\n\nExamples\n\nH = generate_bch_parity_check_matrix(15, 7)\n\n\n\n\n\n","category":"method"},{"location":"#CodingTheoryUtils.BCH.validate_bch_parameters-Tuple{Int64, Int64}","page":"Home","title":"CodingTheoryUtils.BCH.validate_bch_parameters","text":"validate_bch_parameters(n::Int, k::Int)\n\nValidate parameters for BCH code construction.\n\nArguments\n\nn::Int: Code length\nk::Int: Information bits\n\nReturns\n\n(m, t): Field extension degree and error correction capability\n\nThrows\n\nArgumentError: If parameters are invalid for BCH code construction\n\nExamples\n\nm, t = validate_bch_parameters(15, 7)  # Returns (4, 2)\n\n\n\n\n\n","category":"method"}]
}
